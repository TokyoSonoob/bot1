const {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  PermissionsBitField,
} = require("discord.js");
const express = require("express");
const { db } = require("./firebase");

module.exports = function (client) {
  const PREFIX = "!";
  const STAFF_ROLE_ID = "1374387525040214016";
  const CATEGORY_ID = "1374396536951406683";
  const FORM_CHANNEL_ID = "1374427289948786759"; // ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°

  const OWNER_IDS = {
    skin_hikuri: "1134464935448023152",
    skin_sky: "1260765032413659159",
    skin_mui: "1010202066720936048",
    skin_khim: "1294133075801931870",
    skin_nj: "1092393537238204497",
  };

  client.on("messageCreate", async (message) => {
    if (message.author.bot) return;

    if (message.content.toLowerCase() === `${PREFIX}skin`) {
      if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
        return message.reply("‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
      }

      await message.channel.send({
        content: `# ‡∏î‡∏π‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà\n## <#1374409545836925008>`,
      });

      const embed = new EmbedBuilder()
        .setTitle("‡∏Å‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏™‡∏Å‡∏¥‡∏ô")
        .setDescription("‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡πÄ‡∏•‡πà‡∏ô")
        .setColor(0x9b59b6)
        .setImage("https://media.tenor.com/S4MdyoCR3scAAAAM/oblakao.gif")
        .setFooter({ text: "Make by Purple Shop" });

      const btnHikuri = new ButtonBuilder()
        .setCustomId("skin_hikuri")
        .setLabel("‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Æ‡∏¥‡πÄ‡∏Ñ‡∏£‡∏¥")
        .setStyle(ButtonStyle.Primary);

      const btnSky = new ButtonBuilder()
        .setCustomId("skin_sky")
        .setLabel("‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏Å‡∏≤‡∏¢")
        .setStyle(ButtonStyle.Primary);

      const btnMui = new ButtonBuilder()
        .setCustomId("skin_mui")
        .setLabel("‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏°‡∏∏‡∏¢")
        .setStyle(ButtonStyle.Primary);

      const btnKhim = new ButtonBuilder()
        .setCustomId("skin_khim")
        .setLabel("‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏¥‡∏°")
        .setStyle(ButtonStyle.Primary);

      const btnNj = new ButtonBuilder()
        .setCustomId("skin_nj")
        .setLabel("‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô NJ")
        .setStyle(ButtonStyle.Primary);

      const row = new ActionRowBuilder().addComponents(
        btnHikuri,
        btnSky,
        btnMui,
        btnKhim,
        btnNj
      );

      await message.channel.send({ embeds: [embed], components: [row] });
      message.delete().catch(console.error);
    }

    // ‚úÖ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå !close
    if (message.content.toLowerCase() === `${PREFIX}close`) {
      const userId = message.author.id;
      const owned = Object.entries(OWNER_IDS).find(([, uid]) => uid === userId);

      if (!owned) {
        return message.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ");
      }

      const customIdToRemove = owned[0]; // ‡πÄ‡∏ä‡πà‡∏ô 'skin_nj'

      // ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÉ‡∏ô message ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const recentMessages = await message.channel.messages.fetch({ limit: 10 });
      const botMessage = recentMessages.find(
        (msg) => msg.author.id === client.user.id && msg.components.length > 0
      );

      if (botMessage) {
        const currentRow = botMessage.components[0];
        const newButtons = currentRow.components.filter(
          (btn) => btn.customId !== customIdToRemove
        );

        const newRow = new ActionRowBuilder().addComponents(newButtons);
        await botMessage.edit({ components: [newRow] });
      }

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏Ç‡∏≤‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
      try {
        const formChannel = await client.channels.fetch(FORM_CHANNEL_ID);
        if (formChannel && formChannel.isTextBased()) {
          const formMessages = await formChannel.messages.fetch({ limit: 50 });
          const userMessages = formMessages.filter(
            (msg) =>
              msg.author.id === client.user.id &&
              msg.content.includes(`<@${userId}>`)
          );

          for (const msg of userMessages.values()) {
            await msg.delete().catch(() => {});
          }
        }
      } catch (err) {
        console.error("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
      }

      return message.reply("‚úÖ ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
    }
  });

  client.on("interactionCreate", async (interaction) => {
    if (!interaction.isButton()) return;

    const { guild, user } = interaction;

    if (
      interaction.customId === "skin_hikuri" ||
      interaction.customId === "skin_sky" ||
      interaction.customId === "skin_mui" ||
      interaction.customId === "skin_khim" ||
      interaction.customId === "skin_nj"
    ) {
      let skinName = "";
      let channelName = "";
      let pingUserId = "";

      switch (interaction.customId) {
        case "skin_hikuri":
          skinName = "‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Æ‡∏¥‡πÄ‡∏Ñ‡∏£‡∏¥";
          channelName = `‡∏™‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Æ‡∏¥‡πÄ‡∏Ñ‡∏£‡∏¥`;
          pingUserId = OWNER_IDS.skin_hikuri;
          break;
        case "skin_sky":
          skinName = "‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏Å‡∏≤‡∏¢";
          channelName = `‡∏™‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏Å‡∏≤‡∏¢`;
          pingUserId = OWNER_IDS.skin_sky;
          break;
        case "skin_mui":
          skinName = "‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏°‡∏∏‡∏¢";
          channelName = `‡∏™‡∏Å‡∏¥‡∏ô‡∏°‡∏∏‡∏¢‡∏Ñ‡∏∏‡∏á`;
          pingUserId = OWNER_IDS.skin_mui;
          break;
        case "skin_khim":
          skinName = "‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏¥‡∏°";
          channelName = `‡∏™‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ç‡∏¥‡∏°`;
          pingUserId = OWNER_IDS.skin_khim;
          break;
        case "skin_nj":
          skinName = "‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì NJ";
          channelName = `‡∏™‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì NJ`;
          pingUserId = OWNER_IDS.skin_nj;
          break;
      }

      const userChannels = guild.channels.cache.filter(
        (ch) =>
          ch.parentId === CATEGORY_ID &&
          ch.name === channelName &&
          ch.permissionsFor(user.id)?.has(PermissionsBitField.Flags.ViewChannel)
      );

      if (userChannels.size >= 3) {
        return interaction.reply({
          content: `‚ùó ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô ${skinName} ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ${userChannels.size} ‡∏´‡πâ‡∏≠‡∏á)`,
          ephemeral: true,
        });
      }

      const channel = await guild.channels.create({
        name: channelName,
        type: 0,
        parent: CATEGORY_ID,
        permissionOverwrites: [
          {
            id: guild.id,
            deny: [PermissionsBitField.Flags.ViewChannel],
          },
          {
            id: user.id,
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
          },
          {
            id: STAFF_ROLE_ID,
            allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
          },
        ],
      });

      const embed = new EmbedBuilder()
        .setTitle(`${skinName}`)
        .setColor(0x9b59b6);

      const formUrl = `https://seamuwwww.vercel.app?channelId=${channel.id}`;

      const deleteBtn = new ButtonBuilder()
        .setCustomId("delete_ticket")
        .setLabel("üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏±‡πã‡∏ß")
        .setStyle(ButtonStyle.Danger);

      const formBtn = new ButtonBuilder()
        .setLabel("‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°")
        .setStyle(ButtonStyle.Link)
        .setURL(formUrl);

      const row = new ActionRowBuilder().addComponents(deleteBtn, formBtn);

      await channel.send({
        content: `<@${user.id}>\n<@${pingUserId}>`,
        embeds: [embed],
        components: [row],
      });

      await interaction.reply({
        content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏Å‡∏¥‡∏ô‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô${skinName} ‡πÅ‡∏•‡πâ‡∏ß: ${channel}`,
        ephemeral: true,
      });
    }

    if (interaction.customId === "delete_ticket") {
      await interaction.reply({
        content: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...",
        ephemeral: true,
      });
      setTimeout(() => {
        interaction.channel.delete().catch(console.error);
      }, 10000);
    }
  });
};
