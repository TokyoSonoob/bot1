// embed_fix_s.js
// ‡∏£‡∏ß‡∏° /embed /fix /s ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (discord.js v14)
// ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ process.env.TOKEN (‡πÇ‡∏´‡∏•‡∏î .env ‡πÉ‡∏ô index.js ‡∏Å‡πà‡∏≠‡∏ô require ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ)

module.exports = (client) => {
  const {
    REST,
    Routes,
    Events,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    ActionRowBuilder,
    EmbedBuilder,
    PermissionsBitField,
  } = require("discord.js");

  // =====[ Const ]=====
  const CMD_EMBED = "embed";
  const CMD_FIX = "fix";
  const CMD_S = "s";

  const MODAL_EMBED = "embed_form_modal";
  const CREDIT_MSG = '@everyone \n# ‡∏ù‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà <#1371394966265270323>  ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≤‡∏≤‡∏≤';

  // üî• U+1F525 , ‚è≥ U+23F3 (+ optional FE0E/FE0F)
  // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô üî• ‡∏´‡∏£‡∏∑‡∏≠ ‚è≥/‚è≥Ô∏è + ‡∏Ç‡∏µ‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î + ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å "‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î"
  const STRIP_PREFIX_RE =
    /^(?:\u{1F525}|\u{23F3}[\uFE0E\uFE0F]?)+(?:[\p{Zs}]*(?:[\p{Pd}])+)?[\p{Zs}]*/u;

  // helper: ‡∏•‡∏ö variation selectors ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏¥‡πà‡∏á ‡πÜ
  const normalizeEmojiLeading = (s) => s.replace(/^[\uFE0E\uFE0F]+/, "");

  // =====[ Register Slash Commands (per guild) ]=====
  client.once(Events.ClientReady, async () => {
    try {
      const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);
      const appId = client.application?.id ?? client.user.id;

      const commands = [
        { name: CMD_EMBED, description: "‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á Embed", dm_permission: false },
        { name: CMD_FIX, description: "‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ üî•/‚è≥Ô∏è ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á", dm_permission: false },
        { name: CMD_S, description: "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏° @everyone", dm_permission: false },
      ];

      for (const [guildId] of client.guilds.cache) {
        await rest.put(Routes.applicationGuildCommands(appId, guildId), { body: commands });
        console.log(`‚úÖ Registered /${CMD_EMBED}, /${CMD_FIX}, /${CMD_S} in ${guildId}`);
      }
    } catch (err) {
      console.error("‚ùå Command registration error:", err);
    }
  });

  // =====[ Utils ]=====
  const safeReply = async (interaction, payload) => {
    try {
      if (interaction.deferred || interaction.replied) return await interaction.followUp(payload);
      return await interaction.reply(payload);
    } catch {}
  };

  const canManageChannel = (guild, channel) => {
    const me = guild?.members?.me;
    if (!me) return false;
    return (
      me.permissionsIn(channel)?.has(PermissionsBitField.Flags.ManageChannels) ||
      me.permissions?.has(PermissionsBitField.Flags.ManageChannels)
    );
  };

  const canMentionEveryone = (guild, channel) => {
    const me = guild?.members?.me;
    if (!me) return false;
    return (
      me.permissionsIn(channel)?.has(PermissionsBitField.Flags.MentionEveryone) ||
      me.permissions?.has(PermissionsBitField.Flags.MentionEveryone)
    );
  };

  // =====[ Single Interaction Handler ]=====
  client.on(Events.InteractionCreate, async (interaction) => {
    try {
      // ---------- /embed ----------
      if (interaction.isChatInputCommand() && interaction.commandName === CMD_EMBED) {
        const modal = new ModalBuilder().setCustomId(MODAL_EMBED).setTitle("‡∏™‡∏£‡πâ‡∏≤‡∏á Embed");

        const titleInput = new TextInputBuilder()
          .setCustomId("title").setLabel("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠")
          .setStyle(TextInputStyle.Short).setRequired(true).setMaxLength(256);

        const descInput = new TextInputBuilder()
          .setCustomId("message").setLabel("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
          .setStyle(TextInputStyle.Paragraph).setRequired(true).setMaxLength(4000);

        const imageInput = new TextInputBuilder()
          .setCustomId("image").setLabel("‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
          .setStyle(TextInputStyle.Short).setRequired(false);

        modal.addComponents(
          new ActionRowBuilder().addComponents(titleInput),
          new ActionRowBuilder().addComponents(descInput),
          new ActionRowBuilder().addComponents(imageInput)
        );

        await interaction.showModal(modal);
        return;
      }

      // ---------- /fix ----------
      if (interaction.isChatInputCommand() && interaction.commandName === CMD_FIX) {
        if (!interaction.deferred && !interaction.replied) {
          await interaction.deferReply({ flags: 1 << 6 }); // EPHEMERAL
        }

        if (!interaction.guild || !interaction.channel) {
          await interaction.editReply("‚ùå ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
          return;
        }

        const channel = interaction.channel;
        if (typeof channel.setName !== "function") {
          await interaction.editReply("‚ùå ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô Thread/Forum)");
          return;
        }

        const before = channel.name || "";
        const norm = normalizeEmojiLeading(before);

        const startsFire = /^\u{1F525}/u.test(norm);
        const startsHourglass = /^\u{23F3}/u.test(norm); // normalize ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ô VS

        let after = before;
        if (startsFire) {
          // üî•... -> ‚è≥Ô∏è...
          after = before.replace(/^\u{1F525}[\uFE0E\uFE0F]?/u, "‚è≥Ô∏è").replace(/^\u{1F525}+/u, "‚è≥Ô∏è");
        } else if (!startsHourglass) {
          // ‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ üî• ‡∏´‡∏£‡∏∑‡∏≠ ‚è≥ ‚Üí ‡πÄ‡∏ï‡∏¥‡∏° ‚è≥Ô∏è-
          after = `‚è≥Ô∏è-${before}`;
        }

        if (after === before) {
          await interaction.editReply("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á");
          return;
        }

        if (!canManageChannel(interaction.guild, channel)) {
          await interaction.editReply("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Channels ‡∏à‡∏∂‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
          return;
        }

        try {
          await channel.setName(after, "fix prefix üî• ‚Üí ‚è≥Ô∏è ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏¥‡∏° ‚è≥Ô∏è-");
          await interaction.editReply(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡πà‡∏≠‡∏ô: \`${before}\`\n‡∏´‡∏•‡∏±‡∏á:  \`${after}\``);
        } catch (e) {
          console.error("setName(/fix) error:", e);
          await interaction.editReply("‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
        return;
      }

      // ---------- /s ----------
      if (interaction.isChatInputCommand() && interaction.commandName === CMD_S) {
        if (!interaction.deferred && !interaction.replied) {
          await interaction.deferReply({ flags: 1 << 6 }); // EPHEMERAL
        }

        if (!interaction.guild || !interaction.channel) {
          await interaction.editReply("‚ùå ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
          return;
        }

        const channel = interaction.channel;
        const before = channel.name || "";
        const after = before.replace(STRIP_PREFIX_RE, ""); // ‡∏ï‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á üî• ‡πÅ‡∏•‡∏∞ ‚è≥/‚è≥Ô∏è (+‡∏Ç‡∏µ‡∏î/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)

        if (after !== before && typeof channel.setName === "function") {
          if (!canManageChannel(interaction.guild, channel)) {
            await interaction.editReply("‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Channels ‡πÄ‡∏•‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô");
          } else {
            try {
              await channel.setName(after, "remove leading üî•/‚è≥ by /s");
            } catch (e) {
              console.error("setName(/s) error:", e);
              await interaction.editReply("‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô");
            }
          }
        }

        // ‡∏™‡πà‡∏á‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï + @everyone (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå MentionEveryone)
        const allowPing = canMentionEveryone(interaction.guild, channel);
        try {
          await channel.send({
            content: CREDIT_MSG,
            allowedMentions: allowPing ? { parse: ["everyone"] } : { parse: [] },
          });

          const msg =
            after === before
              ? "‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ üî•/‚è≥ ‡πÉ‡∏´‡πâ‡∏•‡∏ö)"
              : `‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á: \`${before}\` ‚Üí \`${after}\`\n‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß`;

          await interaction.editReply(
            allowPing ? msg : `${msg}\n‚ÑπÔ∏è ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Mention @everyone ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏á‡∏Å‡πå`
          );
        } catch (e) {
          console.error("channel.send error:", e);
          await interaction.editReply("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
        return;
      }

      // ---------- Modal Submit: /embed ----------
      if (interaction.isModalSubmit() && interaction.customId === MODAL_EMBED) {
        if (!interaction.deferred && !interaction.replied) {
          await interaction.deferReply({ flags: 1 << 6 });
        }

        const title = interaction.fields.getTextInputValue("title").trim();
        const message = interaction.fields.getTextInputValue("message").trim();
        const image = (interaction.fields.getTextInputValue("image") || "").trim();

        const embed = new EmbedBuilder()
          .setTitle(title)
          .setDescription(message.slice(0, 4096))
          .setColor(0x9b59b6)
          .setTimestamp()
          .setFooter({ text: "Make by Purple Shop" });

        let warn = "";
        if (image) {
          const isUrl = /^https?:\/\/\S{3,}/i.test(image);
          if (isUrl) embed.setImage(image);
          else warn = "‚ö†Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û";
        }

        if (!interaction.channel?.send) {
          await interaction.editReply("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
          return;
        }

        await interaction.channel.send({ embeds: [embed] });
        await interaction.editReply(`‚úÖ ‡∏™‡πà‡∏á Embed ‡πÅ‡∏•‡πâ‡∏ß${warn ? `\n${warn}` : ""}`);
        return;
      }
    } catch (err) {
      console.error("‚ùå Error in handlers:", err);
      if (interaction.deferred) {
        await interaction.editReply("‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      } else {
        await safeReply(interaction, { content: "‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", flags: 1 << 6 });
      }
    }
  });
};
