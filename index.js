const {
  Client,
  GatewayIntentBits,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  Events,
  PermissionsBitField,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder: ModalRowBuilder,
} = require("discord.js");
const fetch = require("node-fetch");
const path = require("path");
const admin = require("firebase-admin");
const {
  saveAuctionData,
  getAuctionData,
  deleteAuctionData,
} = require("./storage");
require("./server");
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});
require("./money")(client);
require("./skin")(client);
require("./send")(client);
require("./pamoon")(client);
const imageCollectorState = new Map();
const restrictedChannels = new Set();
async function getAttachmentsFromPermaLink(permaLink) {
  const match = permaLink.match(
    /https:\/\/discord\.com\/channels\/(\d+)\/(\d+)\/(\d+)/
  );
  if (!match) return [];

  const [, , channelId, messageId] = match;

  const res = await fetch(
    `https://discord.com/api/v10/channels/${channelId}/messages/${messageId}`,
    {
      headers: {
        Authorization: `Bot ${TOKEN}`,
      },
    }
  );

  if (!res.ok) {
    console.warn("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å permaLink ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", await res.text());
    return [];
  }

  const msgData = await res.json();
  return msgData.attachments || [];
}


async function sendAuctionSummary(guild, doc, parentId) {
  const data = doc.data();
  let summary = data.summary || "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏£‡∏∏‡∏õ";

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô "## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô"
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const formattedDate = tomorrow.toLocaleDateString("th-TH", {
    day: "numeric",
    month: "long",
    year: "numeric",
  });
  const finalSummary = summary.replace(
    "## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô",
    `## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formattedDate}`,
  );

  // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å permaLink ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const imageFiles = [];
  if (data.permaLink) {
    const attachments = await getAttachmentsFromPermaLink(data.permaLink);
    for (const file of attachments) {
      try {
        const res = await fetch(file.url);
        const buffer = await res.buffer();
        imageFiles.push({ attachment: buffer, name: file.filename });
      } catch (err) {
        console.warn("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å permaLink ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err.message);
      }
    }
  }

  const channelName = data.roomName || `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-${doc.id}`;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà public
  const publicChannel = await guild.channels.create({
    name: channelName,
    type: 0, // GuildText
    parent: parentId,
    permissionOverwrites: [
      {
        id: guild.roles.everyone,
        allow: [
          PermissionsBitField.Flags.ViewChannel,
          PermissionsBitField.Flags.ReadMessageHistory,
        ],
      },
      {
        id: guild.client.user.id,
        allow: [
          PermissionsBitField.Flags.ViewChannel,
          PermissionsBitField.Flags.SendMessages,
          PermissionsBitField.Flags.ManageChannels,
        ],
      },
    ],
  });

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  await publicChannel.send({
    content: finalSummary,
    files: imageFiles.length > 0 ? imageFiles : undefined,
  });

  // ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á"
  const adminRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`close_public_${publicChannel.id}`)
      .setLabel("üî¥ ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á")
      .setStyle(ButtonStyle.Danger),
  );

  await publicChannel.send({
    content: " ",
    components: [adminRow],
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
  await admin.firestore().collection("auction_records").doc(doc.id).update({
    publicChannelId: publicChannel.id,
  });

  console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á ${channelName} ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü publicChannelId ‡πÅ‡∏•‡πâ‡∏ß`);
}

async function sendAuctionSummariesBatch(guild, maxRooms = 5) {
  const parentId = "1375026841114509332"; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà public

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const existingChannels = guild.channels.cache.filter(
    (ch) => ch.parentId === parentId
  );
  if (existingChannels.size >= maxRooms) {
    console.log(`‚ö†Ô∏è ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î public ‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (${maxRooms}) ‡πÅ‡∏•‡πâ‡∏ß`);
    return;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á publicChannel
  const snapshot = await admin.firestore().collection("auction_records")
    .where("publicChannelId", "==", null)
    .orderBy("date", "asc")
    .get();

  if (snapshot.empty) {
    console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á");
    return;
  }

  const dateCount = {};

  for (const doc of snapshot.docs) {
    const data = doc.data();

    // ‡πÅ‡∏õ‡∏•‡∏á Timestamp Firestore ‡πÄ‡∏õ‡πá‡∏ô yyyy-mm-dd
    const date = data.date?.toDate?.();
    if (!date) continue;
    const dateKey = date.toISOString().split("T")[0];

    if (!dateCount[dateKey]) dateCount[dateKey] = 0;
    if (dateCount[dateKey] >= 5) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

    if (
      guild.channels.cache.filter(ch => ch.parentId === parentId).size >= maxRooms
    ) {
      console.log(`‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î public ‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (${maxRooms}) ‡πÅ‡∏•‡πâ‡∏ß`);
      break;
    }

    await sendAuctionSummary(guild, doc, parentId);
    dateCount[dateKey]++;
  }
}





const scheduleAutoPost = () => {
  setInterval(async () => {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const day = now.getDay();

    const isTargetDay = [1, 3, 5].includes(day);
    const isTargetTime = hours === 19 && minutes === 0;

    if (!isTargetDay || !isTargetTime) return;

    try {
      const guild = client.guilds.cache.first();
      if (!guild) {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö guild ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà");
        return;
      }

      const categoryId = "1375026841114509332";
      const category = await guild.channels.fetch(categoryId);
      if (!category) {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà public");
        return;
      }

      const channelsInCategory = guild.channels.cache.filter(
        (c) => c.parentId === categoryId && c.type === 0
      );

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà publicChannelId === null ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
      const snapshot = await admin.firestore().collection("auction_records")
        .where("publicChannelId", "==", null)
        .orderBy("date", "desc")
        .get();

      if (snapshot.empty) {
        console.log("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏™‡πà‡∏á public ‡πÅ‡∏•‡πâ‡∏ß");
        return;
      }

      // ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ roomName ‡πÄ‡∏ä‡πà‡∏ô "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-12"
      const docsSorted = snapshot.docs
        .map(doc => {
          const data = doc.data();
          const match = data.roomName?.match(/‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-(\d+)/);
          const count = match ? parseInt(match[1]) : Infinity;
          return { doc, count };
        })
        .filter(d => d.count !== Infinity)
        .sort((a, b) => a.count - b.count);

      if (docsSorted.length === 0) {
        console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ roomName ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }

      // Loop ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏ï‡πá‡∏° 7 ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
      for (const item of docsSorted) {
  if (channelsInCategory.size >= 7) {
    console.log(`‚ö†Ô∏è ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${categoryId} ‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏á‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°`);
    break;
  }
        const doc = item.doc;
        const data = doc.data();

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sendAuctionSummary ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô ownerId ‡∏´‡∏£‡∏∑‡∏≠ fallback
        const fakeUserId = data.ownerId || client.user.id;

        // ‡∏™‡πà‡∏á
         await sendAuctionSummary(guild, item.doc, categoryId);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï channelsInCategory ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ï‡πâ‡∏≠‡∏á fetch ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á)
         channelsInCategory.set(item.doc.id, { id: item.doc.id });
      }

    } catch (err) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    }
  }, 60 * 1000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
};



client.once("ready", () => {
  console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: ${client.user.tag}`);
  scheduleAutoPost();
});

async function sendFallbackSummary(channel, summary, userId) {
  await channel.send({ content: summary });
  imageCollectorState.delete(userId);
}

const { getLastBid, setLastBid } = require("./storage");
client.on("messageCreate", async (message) => {
  if (message.content === '!room') {
    const member = await message.guild.members.fetch(message.author.id);
    if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
      return;
    }

    await message.delete().catch(console.error);

    const embed = new EmbedBuilder()
      .setTitle('„Éª‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á„Éª')
      .setDescription('‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á')
      .setColor(0x9b59b6)
      .setImage('https://media.tenor.com/S4MdyoCR3scAAAAM/oblakao.gif')
      .setFooter({ text: "Make by Purple Shop" });

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('open_room')
        .setLabel('üõéÔ∏è ‡∏à‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•')
        .setStyle(ButtonStyle.Danger)
    );

    await message.channel.send({ embeds: [embed], components: [row] });
    return;
  }
});


client.on(Events.InteractionCreate, async (interaction) => {
  if (
    interaction.isButton() &&
    interaction.customId.startsWith("close_public_")
  ) {
    const member = await interaction.guild.members.fetch(interaction.user.id);
    if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
      return interaction.reply({
        content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ",
        flags: 1 << 6,
      });
    }
    await interaction.reply({
      content: "üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢...",
      flags: 1 << 6,
    });
    await interaction.channel.delete();
  }

  const guild = interaction.guild;
  const user = interaction.user;

  if (interaction.isButton()) {
    if (interaction.customId === "open_room") {
      const parentId = "1387466735619412030";
      const counterRef = admin
        .firestore()
        .collection("auction_counters")
        .doc("counter");
      const counterSnap = await counterRef.get();
      let latestCount = 0;

      if (counterSnap.exists) {
        latestCount = counterSnap.data().latestCount || 0;
      }

      const nextCount = latestCount + 1;
      await counterRef.set({ latestCount: nextCount });

      // üìõ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
      const baseName = `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-${nextCount}`;
      const channelName = `${baseName}-${interaction.user.username}`
        .toLowerCase()
        .replace(/[^a-zA-Z0-9‡∏Å-‡πô\-]/g, "");

      await interaction.reply({
        content: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß`,
        flags: 1 << 6,
      });
      
      const channel = await interaction.guild.channels.create({
        name: channelName,
        type: 0,
        parent: parentId,
        permissionOverwrites: [
          {
            id: interaction.guild.roles.everyone,
            deny: [PermissionsBitField.Flags.ViewChannel],
          },
          {
            id: interaction.user.id,
            allow: [
              PermissionsBitField.Flags.ViewChannel,
              PermissionsBitField.Flags.SendMessages,
              PermissionsBitField.Flags.ReadMessageHistory,
            ],
          },
          {
            id: client.user.id,
            allow: [
              PermissionsBitField.Flags.ViewChannel,
              PermissionsBitField.Flags.SendMessages,
              PermissionsBitField.Flags.ManageChannels,
            ],
          },
        ],
      });

      // ‚úÖ ‡∏™‡πà‡∏á Embed + ‡∏õ‡∏∏‡πà‡∏°
      const embed = new EmbedBuilder()
        .setTitle("üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢")
        .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
        .setColor(0x9b59b6);

      const adminRow = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("close_channel")
          .setLabel("üî¥ ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á")
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId("fill_info")
          .setLabel("üü° ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId("submit_info")
          .setLabel("üü¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
          .setStyle(ButtonStyle.Success),
      );

      await channel.send({
        content: `<@${interaction.user.id}>`,
        embeds: [embed],
        components: [adminRow],
      });
    }

    if (interaction.customId === "close_channel") {
      const member = await guild.members.fetch(interaction.user.id);
      if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
        return interaction.reply({
          content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ",
          flags: 1 << 6,
        });
      }
      await interaction.reply({
        content: "üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢...",
        flags: 1 << 6,
      });
      const channelId = interaction.channel.id;
      await admin.firestore().collection("auction_records").doc(channelId).delete().catch(console.warn);
      await interaction.channel.delete();
    }

    if (interaction.customId === "fill_info") {
      const modal = new ModalBuilder()
        .setCustomId("auction_form")
        .setTitle("üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•");

      modal.addComponents(
        new ModalRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("start_price")
            .setLabel("üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)")
            .setStyle(TextInputStyle.Short)
            .setRequired(true),
        ),
        new ModalRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("bid_step")
            .setLabel("üîº ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ (‡∏ö‡∏≤‡∏ó)")
            .setStyle(TextInputStyle.Short)
            .setRequired(true),
        ),
        new ModalRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("target_price")
            .setLabel("üéØ ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ (‡∏ö‡∏≤‡∏ó)")
            .setStyle(TextInputStyle.Short)
            .setRequired(true),
        ),
        new ModalRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("prize")
            .setLabel("üéÅ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ")
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true),
        ),
        new ModalRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId("rules")
            .setLabel("üìú ‡∏Å‡∏é")
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true),
        ),
      );

      await interaction.showModal(modal);
    }


  if (!interaction.isButton()) return;

if (interaction.customId === "submit_info") {
  await interaction.deferReply({ ephemeral: true });

  try {
    const guild = interaction.guild;
    const member = await guild.members.fetch(interaction.user.id);

    if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
      return await interaction.editReply({
        content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ",
      });
    }

    const parentId = "1375026841114509332";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auction_records ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ publicChannelId ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    const snapshot = await admin.firestore().collection("auction_records")
      .where("publicChannelId", "==", null)
      .orderBy("date", "asc")
      .limit(1)
      .get();

    if (snapshot.empty) {
      return await interaction.editReply({
        content: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á",
      });
    }

    const doc = snapshot.docs[0];

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    await sendAuctionSummary(guild, doc, parentId);

    await interaction.editReply({
      content: `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà`,
    });

  } catch (error) {
    console.error("‚ùå Error submit_info:", error);
    await interaction.editReply({
      content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    });
  }
}




    if (interaction.customId === "no_image") {
      const userId = interaction.user.id;
      const channelId = interaction.channel.id;

      // üîÅ ‡∏î‡∏∂‡∏á summary ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å modal ‡∏´‡∏£‡∏∑‡∏≠ fallback
      const summary = globalThis.lastFullSummary?.[channelId] || "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏£‡∏∏‡∏õ";

      // ‚úÖ ‡πÄ‡∏ã‡∏ü summary ‡∏•‡∏á Firestore ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ image
      const timestamp = admin.firestore.Timestamp.now();
const dateObj = timestamp.toDate();
const weekday = dateObj.toLocaleDateString("en-US", { weekday: "long" }); // ‡πÄ‡∏ä‡πà‡∏ô Monday
const currentName = interaction.channel.name;
const baseName = currentName.split("-").slice(0, 2).join("-"); // ‡πÄ‡∏ä‡πà‡∏ô '‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-11'
const channelName = baseName;

await admin.firestore().collection("auction_records").doc(channelId).set({
  summary,
  date: timestamp,
  weekday,
  roomName: channelName,
  ownerId: interaction.user.id,
  publicChannelId: null,
});


      // ‚úÖ ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      if (imageCollectorState.has(userId)) {
        const oldMsg = imageCollectorState.get(userId);
        try {
          await oldMsg.delete();
        } catch {}
        imageCollectorState.delete(userId);
      }

      // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° bot ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà embed ‡∏´‡∏•‡∏±‡∏Å
      const messages = await interaction.channel.messages.fetch({ limit: 100 });
      const toDelete = messages.filter(
        (m) =>
          m.author.id === client.user.id &&
          !m.embeds.some((e) => e.title === "üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢"),
      );
      for (const m of toDelete.values()) {
        try {
          await m.delete();
        } catch {}
      }

      // ‚úÖ ‡∏™‡πà‡∏á fallback summary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (!imageCollectorState.has(userId)) {
        try {
          const msg = await interaction.channel.send({ content: summary });
          imageCollectorState.set(userId, msg); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
        } catch (err) {
          console.warn("‚ùå ‡∏™‡πà‡∏á fallback summary ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err.message);
        }
      }

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö ephemeral (‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content: "üì∑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ö ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß",
          flags: 1 << 6, // ephemeral
        });
      } else {
        await interaction.followUp({
          content: "üì∑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
          ephemeral: true,
        });
      }
    }
  }

  if (interaction.isModalSubmit() && interaction.customId === "auction_form") {
  const filter = (m) => m.author.id === interaction.user.id;
  const collector = interaction.channel.createMessageCollector({
    filter,
    time: 30 * 60 * 1000,
  });

  // üëá ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà
  await deleteAuctionData(interaction.channel.id);
    const startPrice = interaction.fields.getTextInputValue("start_price");
    const bidStep = interaction.fields.getTextInputValue("bid_step");
    const targetPrice = interaction.fields.getTextInputValue("target_price");
    const prize = interaction.fields.getTextInputValue("prize");
    const rules = interaction.fields.getTextInputValue("rules");

    const channelName = interaction.channel.name;
    const title = `# ${channelName.replace(/-/g, " ")}`;
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const formattedDate = tomorrow.toLocaleDateString("th-TH", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });

    const fullSummary = `${title}

## ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ : ${startPrice} ‡∏ö‡∏≤‡∏ó
## ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ : ${bidStep} ‡∏ö‡∏≤‡∏ó
## ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ : ${targetPrice} ‡∏ö‡∏≤‡∏ó
## ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ : ${prize}
## ‡∏Å‡∏é : ${rules}
## ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 20:00 ‡∏ô.
## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô
||@everyone||`;

    if (!globalThis.lastFullSummary) globalThis.lastFullSummary = {};
    globalThis.lastFullSummary[interaction.channel.id] = fullSummary;

    const imagePrompt = new EmbedBuilder()
      .setTitle("üì∑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
      .setDescription(
        "üîΩ ‡∏™‡πà‡∏á **‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤** ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ",
      )
      .setColor(0x3498db);

    const noImageRow = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("no_image")
        .setLabel("üì∑ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
        .setStyle(ButtonStyle.Secondary),
    );

    await interaction.channel.send({
      content: `<@${interaction.user.id}>\n\n${fullSummary}`,
      embeds: [imagePrompt],
      components: [noImageRow],
    });

    await interaction.reply({
      content: "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ",
      flags: 1 << 6,
    });

collector.on("collect", async (msg) => {
  const isImage =
    msg.attachments.size > 0 &&
    [...msg.attachments.values()].every((file) =>
      file.contentType?.startsWith("image/"),
    );

  if (!isImage) {
    try {
      await msg.delete();
      await msg.channel.send({
        content: `‚ùå <@${msg.author.id}> ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á **‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û** ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`,
      });
    } catch (err) {
      console.warn("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err.message);
    }
    return;
  }

  // ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (imageCollectorState.has(msg.author.id)) {
    const oldMsg = imageCollectorState.get(msg.author.id);
    try {
      await oldMsg.delete();
    } catch (err) {
      console.warn("‡∏•‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  }
  imageCollectorState.set(msg.author.id, msg);

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà embed ‡∏´‡∏•‡∏±‡∏Å
  const messages = await msg.channel.messages.fetch({ limit: 100 });
  const botMessages = messages.filter(
    (m) =>
      m.author.id === client.user.id &&
      !m.embeds.some((e) => e.title === "üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢"),
  );
  for (const m of botMessages.values()) {
    try {
      await m.delete();
    } catch (err) {
      console.warn("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err.message);
    }
  }

  // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ + ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  await msg.channel.send({
    content: fullSummary,
    files: [...msg.attachments.values()].map((a) => a.url),
  });

  try {
    await msg.react("‚úÖ");
    await msg.delete();
  } catch (err) {
    console.warn("‚ö†Ô∏è ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° / react / ‡∏•‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err.message);
  }

  // ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡∏≤‡∏ß‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå
  const permaChannelId = "1400551163321122836";
  const permaChannel = await client.channels.fetch(permaChannelId);

  const permaMsg = await permaChannel.send({
    content: `<#${msg.channel.id}>`,
    files: [...msg.attachments.values()].map((a) => a.url),
  });
  const currentName = interaction.channel.name;
      const baseName = currentName.split("-").slice(0, 2).join("-"); // ‡πÄ‡∏ä‡πà‡∏ô '‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-11'
      const channelName = baseName;
  const permaLink = `https://discord.com/channels/${msg.guild.id}/${permaChannelId}/${permaMsg.id}`;
  const timestamp = admin.firestore.Timestamp.now();
const dateObj = timestamp.toDate();
const weekday = dateObj.toLocaleDateString("en-US", { weekday: "long" }); // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©


await admin.firestore().collection("auction_records").doc(msg.channel.id).set({
  permaLink,
  summary: fullSummary,
  date: timestamp,
  weekday: weekday,
  roomName: channelName,
  ownerId: interaction.user.id,
  publicChannelId: null,
});



  collector.stop();
});



    collector.on("end", async () => {
      if (!imageCollectorState.has(interaction.user.id)) {
        await sendFallbackSummary(
          interaction.channel,
          fullSummary,
          interaction.user.id,
        );
      }
    });
  }
});
client.login(process.env.token);
