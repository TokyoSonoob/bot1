// ban.js
const {
  SlashCommandBuilder,
  ChannelType,
  PermissionsBitField,
  Events,
} = require("discord.js");

/** ====== ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï/‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ====== */
const SWEEP = {
  MAX_FETCH_LOOPS_PER_TEXT_CHANNEL: 10,   // ‡∏î‡∏∂‡∏á 100 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏£‡∏≠‡∏ö => ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ~1,000 ‡∏ï‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
  MAX_FETCH_LOOPS_PER_THREAD: 5,          // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ~500 ‡∏ï‡πà‡∏≠‡πÄ‡∏ò‡∏£‡∏î
  DELETE_OLDER_THAN_MS: null,             // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (ms) | null = ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á
  BAN_DELETE_MESSAGE_SECONDS: 7 * 24 * 60 * 60, // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ô ban
};

async function deleteMessagesInTextLikeChannel(channel, targetId, loopsMax) {
  if (!channel?.permissionsFor) return 0;
  const perms = channel.permissionsFor(channel.client.user.id);
  if (!perms?.has(PermissionsBitField.Flags.ViewChannel) ||
      !perms?.has(PermissionsBitField.Flags.ReadMessageHistory) ||
      !perms?.has(PermissionsBitField.Flags.ManageMessages)) {
    return 0;
  }

  let deletedCount = 0;
  let before;

  for (let i = 0; i < loopsMax; i++) {
    const batch = await channel.messages.fetch({ limit: 100, before }).catch(() => null);
    if (!batch || batch.size === 0) break;

    let targets = batch.filter(m => m.author?.id === targetId);

    if (SWEEP.DELETE_OLDER_THAN_MS != null) {
      const now = Date.now();
      targets = targets.filter(m => (now - m.createdTimestamp) <= SWEEP.DELETE_OLDER_THAN_MS);
    }

    for (const msg of targets.values()) {
      await msg.delete().catch(() => {});
      deletedCount++;
    }

    const last = batch.last();
    before = last?.id;
    if (!before) break;
  }
  return deletedCount;
}

async function sweepAllTextChannels(guild, targetId) {
  let totalDeleted = 0;

  // ‡∏£‡∏ß‡∏°: ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®, ‡∏ü‡∏≠‡∏£‡∏±‡πà‡∏°, ‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á, ‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏™‡πÄ‡∏ï‡∏à
  const textLike = guild.channels.cache.filter(ch =>
    ch.type === ChannelType.GuildText ||
    ch.type === ChannelType.GuildAnnouncement ||
    ch.type === ChannelType.GuildForum ||
    ch.type === ChannelType.GuildVoice ||          // ‚úÖ ‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    ch.type === ChannelType.GuildStageVoice        // ‚úÖ ‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡πÄ‡∏ï‡∏à
  );

  for (const channel of textLike.values()) {
    // ‡∏•‡∏ö‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®/‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á/‡∏™‡πÄ‡∏ï‡∏à
    if (
      channel.type === ChannelType.GuildText ||
      channel.type === ChannelType.GuildAnnouncement ||
      channel.type === ChannelType.GuildVoice ||
      channel.type === ChannelType.GuildStageVoice
    ) {
      totalDeleted += await deleteMessagesInTextLikeChannel(
        channel,
        targetId,
        SWEEP.MAX_FETCH_LOOPS_PER_TEXT_CHANNEL
      );
    }

    // ‡∏ü‡∏≠‡∏£‡∏±‡πà‡∏° + ‡πÄ‡∏ò‡∏£‡∏î (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏ò‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®/‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (channel.threads) {
      const [active, archived] = await Promise.all([
        channel.threads.fetchActive().catch(() => null),
        channel.threads.fetchArchived({ limit: 100 }).catch(() => null),
      ]);

      const allThreads = [];
      if (active?.threads) allThreads.push(...active.threads.values());
      if (archived?.threads) allThreads.push(...archived.threads.values());

      for (const thr of allThreads) {
        totalDeleted += await deleteMessagesInTextLikeChannel(
          thr,
          targetId,
          SWEEP.MAX_FETCH_LOOPS_PER_THREAD
        );
      }
    }
  }

  return totalDeleted;
}

async function disconnectFromVoiceIfAny(guild, targetId) {
  const member = await guild.members.fetch(targetId).catch(() => null);
  if (!member?.voice?.channel) return false;

  const me = guild.members.me;
  const botPerms = member.voice.channel.permissionsFor(me);
  if (!botPerms?.has(PermissionsBitField.Flags.MoveMembers)) return false;

  await member.voice.disconnect().catch(() => {});
  return true;
}

async function banOrKick(guild, targetId, reason) {
  try {
    await guild.members.ban(targetId, {
      deleteMessageSeconds: SWEEP.BAN_DELETE_MESSAGE_SECONDS,
      reason: reason || "Moderation /ban",
    });
    return { action: "banned" };
  } catch (_) {}

  const member = await guild.members.fetch(targetId).catch(() => null);
  if (member) {
    try {
      await member.kick(reason || "Moderation /ban -> fallback kick");
      return { action: "kicked" };
    } catch (_) {}
  }
  return { action: "none" };
}

function ensureInvokerPerms(interaction) {
  const invoker = interaction.member;
  return invoker?.permissions?.has(PermissionsBitField.Flags.BanMembers);
}

module.exports = (client) => {
  // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /ban
  client.once("ready", async () => {
    try {
      await client.application.commands.create(
        new SlashCommandBuilder()
          .setName("ban")
          .setDescription("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á (‡∏£‡∏ß‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á) ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ô/‡πÄ‡∏ï‡∏∞")
          .addStringOption(o =>
            o.setName("id")
             .setDescription("Discord User ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô/‡πÄ‡∏ï‡∏∞")
             .setRequired(true)
          )
          .toJSON()
      );
      console.log("‚úÖ Registered /ban command");
    } catch (e) {
      console.warn("‚ö†Ô∏è Cannot register /ban command:", e?.message || e);
    }
  });

  client.on(Events.InteractionCreate, async (interaction) => {
    if (!interaction.isChatInputCommand()) return;
    if (interaction.commandName !== "ban") return;

    if (!ensureInvokerPerms(interaction)) {
      return interaction.reply({ content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Ban Members)", ephemeral: true });
    }

    const targetId = interaction.options.getString("id", true).trim();
    if (!/^\d+$/.test(targetId)) {
      return interaction.reply({ content: "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral: true });
    }

    await interaction.deferReply({ ephemeral: true });

    const guild = interaction.guild;
    if (!guild) {
      return interaction.editReply("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }

    const disconnected = await disconnectFromVoiceIfAny(guild, targetId).catch(() => false);
    const totalDeleted = await sweepAllTextChannels(guild, targetId).catch(() => 0);
    const { action } = await banOrKick(guild, targetId, `Requested by ${interaction.user.tag}`).catch(() => ({ action: "none" }));

    const lines = [];
    lines.push(`‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö : **${totalDeleted}** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);
    if (action === "banned") lines.push("‚õî ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: **‡πÅ‡∏ö‡∏ô** ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else if (action === "kicked") lines.push("üö™ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: **‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å** ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else lines.push("‡πÅ‡∏ö‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    await interaction.editReply(lines.join("\n"));
  });
};
