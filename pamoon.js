const {
  Events,
  PermissionsBitField,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} = require("discord.js");
const admin = require("firebase-admin");
const schedule = require("node-schedule");
const fetch = require("node-fetch"); // ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å permaLink

const db = admin.firestore();
const bidsRef = db.collection("bids");

module.exports = function (client) {
  const bidTimeouts = new Map();

  const AUCTION_CATEGORY_ID = "1375026841114509332"; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡πâ‡∏≠‡∏á public
  const ROOM_NAME_KEYWORD = "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà";

  function isEligibleAuctionChannel(channel) {
    if (!channel) return false;
    const name = (channel.name || "").toString();
    return channel.parentId === AUCTION_CATEGORY_ID && /‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà/i.test(name);
  }

  async function cleanOrphanBids() {
    const guild = client.guilds.cache.first();
    if (!guild) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö guild ‡πÉ‡∏ô client");
      return;
    }

    const snapshot = await bidsRef.get();
    for (const doc of snapshot.docs) {
      const channelId = doc.id;
      const channel = guild.channels.cache.get(channelId);
      if (!channel) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ${channelId} ‡πÉ‡∏ô guild. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore...`);
        await bidsRef.doc(channelId).delete().catch(console.error);
      }
    }
  }

  // üÜï helper: ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
  async function lockAndHideChannel(channel, guild) {
    try {
      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏≠‡∏á @everyone
      await channel.permissionOverwrites.edit(guild.roles.everyone, {
        ViewChannel: false,
        SendMessages: false,
        ReadMessageHistory: false,
      });
      // ‡∏Ñ‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ
      await channel.permissionOverwrites.edit(client.user.id, {
        ViewChannel: true,
        SendMessages: true,
        ReadMessageHistory: true,
        ManageChannels: true,
      });
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå timeout ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (bidTimeouts.has(channel.id)) {
        clearTimeout(bidTimeouts.get(channel.id));
        bidTimeouts.delete(channel.id);
      }
      console.log(`üîí ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${channel.name}`);
    } catch (e) {
      console.error("‚ùå ‡∏•‡πá‡∏≠‡∏Å/‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
    }
  }

  // ===== helper: ‡∏î‡∏∂‡∏á‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å permaLink (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏≤‡∏ß‡∏£) =====
  async function getAttachmentsFromPermaLink(permaLink) {
    const match = permaLink?.match(/https:\/\/discord\.com\/channels\/(\d+)\/(\d+)\/(\d+)/);
    if (!match) return [];
    const [, , channelId, messageId] = match;

    const res = await fetch(
      `https://discord.com/api/v10/channels/${channelId}/messages/${messageId}`,
      { headers: { Authorization: `Bot ${process.env.token}` } }
    );

    if (!res.ok) {
      console.warn("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å permaLink ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", await res.text());
      return [];
    }

    const msgData = await res.json();
    return msgData.attachments || [];
  }

  // ===== helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á public + ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ + ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore =====
  async function sendAuctionSummary(guild, doc, parentId) {
    const data = doc.data();
    let summary = data.summary || "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏£‡∏∏‡∏õ";

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà "## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô" ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î)
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const formattedDate = tomorrow.toLocaleDateString("th-TH", {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
    const finalSummary = summary.replace(
      "## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô",
      `## ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formattedDate}`
    );

    // ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å permaLink ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const imageFiles = [];
    if (data.permaLink) {
      const attachments = await getAttachmentsFromPermaLink(data.permaLink);
      for (const file of attachments) {
        try {
          const res = await fetch(file.url);
          const buffer = await res.buffer();
          imageFiles.push({ attachment: buffer, name: file.filename });
        } catch (err) {
          console.warn("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å permaLink ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err.message);
        }
      }
    }

    const channelName = data.roomName || `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-${doc.id}`;
    const publicChannel = await guild.channels.create({
      name: channelName,
      type: 0, // GuildText
      parent: parentId,
      permissionOverwrites: [
        {
          id: guild.roles.everyone,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.ReadMessageHistory,
          ],
        },
        {
          id: client.user.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ManageChannels,
          ],
        },
      ],
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ + ‡∏£‡∏π‡∏õ
    await publicChannel.send({
      content: finalSummary,
      files: imageFiles.length > 0 ? imageFiles : undefined,
    });

    // ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á" (‡∏ï‡∏±‡∏ß handler ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô index.js ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß)
    const adminRow = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`close_public_${publicChannel.id}`)
        .setLabel("‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á")
        .setStyle(ButtonStyle.Danger)
    );
    await publicChannel.send({ content: " ", components: [adminRow] });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore
    await admin.firestore().collection("auction_records").doc(doc.id).update({
      publicChannelId: publicChannel.id,
    });

    console.log(`‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á ${channelName} ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü publicChannelId ‡πÅ‡∏•‡πâ‡∏ß`);
  }

  client.once("ready", async () => {
    await cleanOrphanBids();

    // ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á cron ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á) =====
    const runCloseAuctions = async () => {
      const recordsSnap = await db.collection("auction_records").get();
      const guild = client.guilds.cache.first();
      if (!guild) {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö guild ‡πÉ‡∏ô client");
        return;
      }

      const historyChannelId = "1376195659501277286";
      const historyChannel = guild.channels.cache.get(historyChannelId);
      if (!historyChannel) {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•");
        return;
      }

      for (const doc of recordsSnap.docs) {
        const record = doc.data();
        const receptionChannelId = doc.id;
        const bidChannelId = record.publicChannelId;
        const ownerId = record.ownerId;

        if (!receptionChannelId || !bidChannelId) continue;

        const receptionChannel = guild.channels.cache.get(receptionChannelId);
        const bidChannel = guild.channels.cache.get(bidChannelId);
        if (!receptionChannel || !bidChannel) continue;

        const bidDoc = await bidsRef.doc(bidChannelId).get();
        const bidData = bidDoc.exists ? bidDoc.data() : null;

        if (bidData?.userId && bidData?.price && bidData?.name) {
          const { userId, price, name } = bidData;
          const fee = price * 0.08;

          await bidChannel.send(
            `# ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• \n## ‡∏Ñ‡∏∏‡∏ì ${name}\n## ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n<@${userId}>`
          );

          await receptionChannel.permissionOverwrites.edit(userId, {
            ViewChannel: true,
            SendMessages: true,
            ReadMessageHistory: true,
          });

          await receptionChannel.send(
            `# ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏•‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß \n## ‡∏Ñ‡∏∏‡∏ì <@${userId}>\n## ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n** ‡∏Ñ‡∏∏‡∏ì <@${ownerId}> ‡∏™‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô <#1406333052736635000>\n ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${fee.toFixed(2)} ‡∏ö‡∏≤‡∏ó**`
          );

          await historyChannel.send(
            `# ${bidChannel.name}\n## ‡∏Ñ‡∏∏‡∏ì <@${userId}>\n## ‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó`
          );
        } else {
          await bidChannel.send("# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n## ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
          await receptionChannel.send(
            `# ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß\n ## ‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n ## ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡∏±‡∏ö ‡∏´‡∏≤‡∏Å‡∏à‡∏∞‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏±‡∏ö \n <@${ownerId}>`
          );
        }

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bids
        await bidsRef.doc(bidChannelId).delete().catch(() => {});
        console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bids ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${bidChannel.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);

        // üÜï ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•
        await lockAndHideChannel(bidChannel, guild);
      }
    };

    // ===== ‡∏ï‡∏±‡πâ‡∏á CRON ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•: ‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£/‡∏û‡∏§‡∏´‡∏±‡∏™/‡πÄ‡∏™‡∏≤‡∏£‡πå 20:00 (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢) =====
    const jobClose = schedule.scheduleJob(
      { rule: "0 19 * * 2,3,4,5,6", tz: "Asia/Bangkok" },
      async () => {
        try {
          const nowTH = new Date().toLocaleString("th-TH", { timeZone: "Asia/Bangkok" });
          console.log(`üîî RUN close-auctions @TH ${nowTH}`);
          await runCloseAuctions();
        } catch (e) {
          console.error("‚ùå close-auctions job error:", e);
        }
      }
    );

    // ===== ‡∏ï‡∏±‡πâ‡∏á CRON ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå/‡∏û‡∏∏‡∏ò/‡∏®‡∏∏‡∏Å‡∏£‡πå 19:00 (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢) ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ 5 ‡∏´‡πâ‡∏≠‡∏á =====
    const jobOpen = schedule.scheduleJob(
      { rule: "1 19 * * 1,2,3,4,5", tz: "Asia/Bangkok" },
      async () => {
        try {
          const guild = client.guilds.cache.first();
          if (!guild) {
            console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö guild ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏≠‡∏¢‡∏π‡πà");
            return;
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
          const parentId = AUCTION_CATEGORY_ID;
          const category =
            guild.channels.cache.get(parentId) ||
            (await guild.channels.fetch(parentId).catch(() => null));
          if (!category) {
            console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà public (AUCTION_CATEGORY_ID)");
            return;
          }

          // ‡∏î‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î (publicChannelId ‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ)
          const snap = await admin.firestore().collection("auction_records").get();
          const pending = snap.docs.filter((d) => {
            const pcid = d.data().publicChannelId;
            return pcid === null || pcid === "" || pcid === undefined;
          });

          if (pending.length === 0) {
            console.log("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•");
            return;
          }

          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô roomName: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-<n>" ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
          const docsSorted = pending
            .map((doc) => {
              const data = doc.data();
              const match = data.roomName?.match(/‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-(\d+)/);
              const count = match ? parseInt(match[1]) : Number.POSITIVE_INFINITY;
              return { doc, count };
            })
            .filter((x) => Number.isFinite(x.count))
            .sort((a, b) => a.count - b.count)
            .map((x) => x.doc);

          const toOpen = docsSorted.slice(0, 5); // ‡πÄ‡∏õ‡∏¥‡∏î 5 ‡∏´‡πâ‡∏≠‡∏á
          if (toOpen.length === 0) {
            console.log("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö roomName ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö '‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà-<‡πÄ‡∏•‡∏Ç>'");
            return;
          }

          // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á (‡∏Å‡∏±‡∏ô rate limit ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠ log)
          const nowTH = new Date().toLocaleString("th-TH", { timeZone: "Asia/Bangkok" });
          console.log(`üöÄ OPEN auctions x${toOpen.length} @TH ${nowTH}`);
          for (const d of toOpen) {
            try {
              await sendAuctionSummary(guild, d, parentId);
            } catch (err) {
              console.error(`‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (doc ${d.id}):`, err);
            }
          }
        } catch (e) {
          console.error("‚ùå open-auctions job error:", e);
        }
      }
    );

    // log ‡∏ô‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    const nextClose = jobClose.nextInvocation?.();
    if (nextClose) {
      console.log("‚è≠Ô∏è [close] next run (server):", nextClose.toString());
      console.log(
        "‚è≠Ô∏è [close] next run (Asia/Bangkok):",
        nextClose.toLocaleString("th-TH", { timeZone: "Asia/Bangkok" })
      );
    }
    const nextOpen = jobOpen.nextInvocation?.();
    if (nextOpen) {
      console.log("‚è≠Ô∏è [open] next run (server):", nextOpen.toString());
      console.log(
        "‚è≠Ô∏è [open] next run (Asia/Bangkok):",
        nextOpen.toLocaleString("th-TH", { timeZone: "Asia/Bangkok" })
      );
    }
  });

  // =========================
  //  MessageCreate & Commands
  // =========================
  client.on(Events.MessageCreate, async (message) => {
    if (message.author.bot) return;

    const channel = message.channel;

    // ===== ADMIN: !end =====
    if (
      message.content === "!end" &&
      message.member.permissions.has(PermissionsBitField.Flags.Administrator)
    ) {
      const bidChannel = message.channel;
      const bidChannelId = bidChannel.id;

      console.log("üîî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á:", bidChannel.name);
      await message.delete().catch(() => {});

      async function fetchMemberOrNull(guild, userId) {
        return (
          guild.members.cache.get(userId) ||
          (await guild.members.fetch(userId).catch(() => null))
        );
      }

      async function findLatestBidFromMessages(channel, guild) {
        const bidRegex = /^(\S+)\s+(\d+(?:\.\d+)?)$/;
        let beforeId = null;

        while (true) {
          const batch = await channel.messages.fetch({
            limit: 100,
            ...(beforeId ? { before: beforeId } : {}),
          });
          if (!batch.size) break;

          for (const msg of batch.values()) {
            if (msg.author.bot) continue;
            const text = msg.content?.trim() ?? "";
            const m = text.match(bidRegex);
            if (!m) continue;

            const [, name, priceStr] = m;
            const member = await fetchMemberOrNull(guild, msg.author.id);
            if (member) {
              return {
                userId: msg.author.id,
                name,
                price: parseFloat(priceStr),
                messageId: msg.id,
                at: msg.createdTimestamp,
              };
            }
          }

          beforeId = batch.last().id;
        }

        return null;
      }

      const recordsSnap = await db.collection("auction_records").get();

      let receptionRecord = null;
      for (const doc of recordsSnap.docs) {
        const data = doc.data();
        if (data.publicChannelId === bidChannelId) {
          receptionRecord = { id: doc.id, ...data };
          break;
        }
      }

      if (!receptionRecord) {
        await message.channel
          .send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• auction_records ‡∏ó‡∏µ‡πà publicChannelId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
          .catch(() => {});
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö auction_records ‡∏ó‡∏µ‡πà publicChannelId =", bidChannelId);
        return;
      }

      const receptionChannel = message.guild.channels.cache.get(receptionRecord.id);
      if (!receptionChannel) {
        await message.channel
          .send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å ID ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
          .catch(() => {});
        console.warn("‚ö†Ô∏è receptionChannel not found:", receptionRecord.id);
        return;
      }

      const bidsSnap = await db.collection("bids").doc(bidChannelId).get();

      let winner = null;
      let replacedWinner = false;
      let oldWinner = null;

      if (bidsSnap.exists) {
        const bidsData = bidsSnap.data();
        if (bidsData?.userId && bidsData?.price) {
          const member = await fetchMemberOrNull(message.guild, bidsData.userId);
          if (member) {
            winner = {
              userId: bidsData.userId,
              name: bidsData.name,
              price: bidsData.price,
            };
          } else {
            replacedWinner = true;
            oldWinner = {
              userId: bidsData.userId,
              name: bidsData.name,
              price: bidsData.price,
            };
          }
        }
      }

      if (!winner) {
        const fallback = await findLatestBidFromMessages(bidChannel, message.guild);
        if (fallback) {
          winner = fallback;
          await db
            .collection("bids")
            .doc(bidChannelId)
            .set(
              {
                name: winner.name,
                price: winner.price,
                userId: winner.userId,
                channelId: bidChannelId,
                updatedAt: Date.now(),
              },
              { merge: true }
            );
        }
      }

      if (!winner) {
        await bidChannel.send("# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n## ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
        await receptionChannel.send(
          `# ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß\n## ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n<@${receptionRecord.ownerId}> ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
        );
        await db.collection("bids").doc(bidChannelId).delete().catch(() => {});
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà:", bidChannelId);

        // üÜï ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
        await lockAndHideChannel(bidChannel, message.guild);
        return;
      }

      const { userId, price, name } = winner;

      try {
        if (replacedWinner && oldWinner) {
          await bidChannel.send(
            `# ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• \n## ‡∏Ñ‡∏∏‡∏ì ${name}\n## ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n## ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å **${oldWinner.name}** ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n<@${userId}>`
          );
        } else {
          await bidChannel.send(
            `# ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• \n## ‡∏Ñ‡∏∏‡∏ì ${name}\n## ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n<@${userId}>`
          );
        }

        await receptionChannel.permissionOverwrites.edit(userId, {
          ViewChannel: true,
          SendMessages: true,
          ReadMessageHistory: true,
        });

        const fee = price * 0.08;
        await receptionChannel.send(
          `# ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏ö‡∏•‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß \n## ‡∏Ñ‡∏∏‡∏ì <@${userId}>\n## ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó\n** ‡∏Ñ‡∏∏‡∏ì <@${receptionRecord.ownerId}> ‡∏™‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•\n ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô <#1406333052736635000>\n ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${fee.toFixed(2)} ‡∏ö‡∏≤‡∏ó**`
        );

        await db.collection("bids").doc(bidChannelId).delete().catch(() => {});
        console.log("‚úÖ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");

        const historyChannelId = "1376195659501277286";
        const historyChannel = message.guild.channels.cache.get(historyChannelId);
        if (historyChannel) {
          await historyChannel.send(
            `# ${bidChannel.name}\n## ‡∏Ñ‡∏∏‡∏ì <@${userId}>\n ## ‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡∏ö‡∏≤‡∏ó`
          );
        }

        // üÜï ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
        await lockAndHideChannel(bidChannel, message.guild);

      } catch (err) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
        await message.channel
          .send("‚ùå ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•")
          .catch(() => {});
      }

      return;
    }

    // ===== ADMIN: !change ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á embed + ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° =====
    if (
      message.content.trim() === "!change" &&
      message.member.permissions.has(PermissionsBitField.Flags.Administrator)
    ) {
      if (!isEligibleAuctionChannel(message.channel)) {
        await message
          .reply(`‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞ **‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${ROOM_NAME_KEYWORD}"**`)
          .catch(() => {});
        return;
      }

      await message.delete().catch(() => {});
      const embed = new EmbedBuilder()
        .setTitle("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Bid")
        .setDescription("‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏Ç‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å")
        .setColor(0x8a2be2);

      const btn = new ButtonBuilder()
        .setCustomId(`auction_change_open:${message.channel.id}`)
        .setLabel("Edit")
        .setStyle(ButtonStyle.Primary);

      const row = new ActionRowBuilder().addComponents(btn);
      await message.channel.send({ embeds: [embed], components: [row] });
      return;
    }

    // ===== ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥ =====
    if (!isEligibleAuctionChannel(channel)) return;

    const content = message.content.trim();
    const parts = content.split(" ");

    if (parts.length !== 2 || isNaN(parseFloat(parts[1]))) {
      try {
        const warnMsg = await channel.send('‚ùó‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **"‡∏ä‡∏∑‡πà‡∏≠ ‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÄ‡∏ä‡πà‡∏ô "sea 100"**');
        setTimeout(async () => {
          await warnMsg.delete().catch(() => {});
        }, 3000);
      } catch (err) {
        console.error("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }
      return;
    }

    try {
      await message.react("üíú");
    } catch (err) {
      console.error("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err);
    }

    const name = parts[0];
    const price = parseFloat(parts[1]);

    const docRef = bidsRef.doc(channel.id);
    const docSnap = await docRef.get();
    const latestBid = docSnap.exists ? docSnap.data() : null;

    if (latestBid && price <= latestBid.price) {
      const warn = await message.reply("‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î!");
      setTimeout(() => {
        warn.delete().catch(() => {});
        message.delete().catch(() => {});
      }, 2000);
      return;
    }

    await docRef.set({
      name,
      price,
      userId: message.author.id,
      channelId: channel.id,
      updatedAt: Date.now(),
    });

    if (bidTimeouts.has(channel.id)) {
      clearTimeout(bidTimeouts.get(channel.id));
    }

    const timeout = setTimeout(async () => {
      const latest = (await docRef.get()).data();
      const msg = `# ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ ${latest.price}\n## <@${latest.userId}>`;
      channel.send(msg);
    }, 5 * 60 * 1000);

    bidTimeouts.set(channel.id, timeout);
  });

  // ===== ‡∏õ‡∏∏‡πà‡∏° & ‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏Ç‡∏≠‡∏á !change (ADMIN ONLY) =====
  client.on(Events.InteractionCreate, async (interaction) => {
    if (
      interaction.isButton() &&
      interaction.customId.startsWith("auction_change_open:")
    ) {
      if (
        !interaction.memberPermissions?.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        await interaction.reply({
          content: "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
          ephemeral: true,
        });
        return;
      }

      const channelId = interaction.customId.split(":")[1];

      const bidChannel =
        interaction.guild.channels.cache.get(channelId) ||
        (await interaction.guild.channels.fetch(channelId).catch(() => null));
      if (!isEligibleAuctionChannel(bidChannel)) {
        await interaction.reply({
          content: `‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ "${ROOM_NAME_KEYWORD}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•`,
          ephemeral: true,
        });
        return;
      }

      const modal = new ModalBuilder()
        .setCustomId(`auction_change_modal:${channelId}:${interaction.message.id}`)
        .setTitle("‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞ (ADMIN)");

      const userIdInput = new TextInputBuilder()
        .setCustomId("user_id")
        .setLabel("User ID (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
        .setPlaceholder("‡πÉ‡∏™‡πà ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞")
        .setRequired(true)
        .setStyle(TextInputStyle.Short);

      const amountInput = new TextInputBuilder()
        .setCustomId("amount")
        .setLabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)")
        .setPlaceholder("‡πÄ‡∏ä‡πà‡∏ô 150")
        .setRequired(true)
        .setStyle(TextInputStyle.Short);

      const row1 = new ActionRowBuilder().addComponents(userIdInput);
      const row2 = new ActionRowBuilder().addComponents(amountInput);
      modal.addComponents(row1, row2);

      await interaction.showModal(modal);
      return;
    }

    if (
      interaction.isModalSubmit() &&
      interaction.customId.startsWith("auction_change_modal:")
    ) {
      if (
        !interaction.memberPermissions?.has(
          PermissionsBitField.Flags.Administrator
        )
      ) {
        await interaction.reply({
          content: "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
          ephemeral: true,
        });
        return;
      }

      const [, channelId, hostMsgId] = interaction.customId.split(":");

      const guild = interaction.guild;
      const bidChannel =
        guild.channels.cache.get(channelId) ||
        (await guild.channels.fetch(channelId).catch(() => null));

      if (!isEligibleAuctionChannel(bidChannel)) {
        await interaction.reply({
          content: `‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ "${ROOM_NAME_KEYWORD}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•`,
          ephemeral: true,
        });
        return;
      }

      const userId = interaction.fields.getTextInputValue("user_id").trim();
      const amountStr = interaction.fields.getTextInputValue("amount").trim();
      const amount = parseFloat(amountStr);

      if (!/^\d{17,20}$/.test(userId)) {
        await interaction.reply({
          content: "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **User ID** ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          ephemeral: true,
        });
        return;
      }
      if (!isFinite(amount) || amount <= 0) {
        await interaction.reply({
          content: "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö **‡∏£‡∏≤‡∏Ñ‡∏≤** ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          ephemeral: true,
        });
        return;
      }

      const member = await guild.members.fetch(userId).catch(() => null);
      if (!member) {
        await interaction.reply({
          content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
          ephemeral: true,
        });
        return;
      }
      const displayName = member.displayName || member.user.username || "Unknown";

      const docRef = bidsRef.doc(channelId);
      await docRef.set(
        {
          name: displayName,
          price: amount,
          userId: userId,
          channelId: channelId,
          updatedAt: Date.now(),
        },
        { merge: true }
      );

      await bidChannel.send(
        `# ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô) ‡∏Ñ‡∏∑‡∏≠ ${amount}\n## <@${userId}>`
      );

      if (bidTimeouts.has(channelId)) {
        clearTimeout(bidTimeouts.get(channelId));
      }
      const timeout = setTimeout(async () => {
        const latest = (await docRef.get()).data();
        if (latest) {
          await bidChannel.send(
            `# ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ ${latest.price}\n## <@${latest.userId}>`
          );
        }
      }, 5 * 60 * 1000);
      bidTimeouts.set(channelId, timeout);

      if (hostMsgId) {
        const hostMsg = await bidChannel.messages.fetch(hostMsgId).catch(() => null);
        if (hostMsg) await hostMsg.delete().catch(() => {});
      }

      await interaction.reply({
        content: `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ‡∏ï‡∏±‡πâ‡∏á <@${userId}> ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ ${amount} ‡∏ö‡∏≤‡∏ó`,
        ephemeral: true,
      });
      return;
    }
  });
};
