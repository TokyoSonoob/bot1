const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField,
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} = require("discord.js");
const { db } = require("./firebase");

const CATEGORY_ID = "1386294803364315147";
const summaryMessages = new Map();
const formMessages = new Map();
function createFormButton() {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId("open_form")
      .setLabel("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
      .setStyle(ButtonStyle.Success)
  );
}


module.exports = function (client) {
client.on("messageCreate", async (message) => {
  if (message.content.startsWith("!ticket")) {
    const args = message.content.split(" ");
    const categoryId = args[1];

    if (!categoryId) {
      return message.reply("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô `!ticket 123456789`");
    }

    const guildId = message.guild.id;

    // ‚úîÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path: ticket_settings/<guildId>
    await db.doc(`ticket_settings/${guildId}`).set({ categoryId });

    const embed = new EmbedBuilder()
      .setTitle("‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô")
      .setDescription("‡∏Å‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô")
      .setColor(0x9b59b6)
      .setImage("https://giffiles.alphacoders.com/220/220120.gif")
      .setFooter({ text: "Make by Purple Shop" });

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(`create_ticket_`) // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        .setLabel("‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô")
        .setStyle(ButtonStyle.Primary)
    );

    await message.channel.send({ embeds: [embed], components: [row] });
    await message.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: \`${categoryId}\``);
  }
});



  // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
  client.on("interactionCreate", async (interaction) => {
  if (interaction.isButton()) {
  if (interaction.customId.startsWith("create_ticket_")) {
    const guildId = interaction.guild.id;

    const doc = await db.doc(`ticket_settings/${guildId}`).get();

if (!doc.exists || !doc.data().categoryId) {
  return interaction.reply({
    content: "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
    ephemeral: true,
  });
}

const categoryId = doc.data().categoryId;

// ‚úÖ Validate ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
if (!/^\d{17,20}$/.test(categoryId)) {
  return interaction.reply({
    content: "‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Snowflake)",
    ephemeral: true,
  });
}


    // ‡πÉ‡∏ä‡πâ categoryId ‡∏à‡∏≤‡∏Å Firebase
    const channel = await interaction.guild.channels.create({
      name: `üî•-ùïãùïöùïîùïúùïñùï•_${interaction.user.username}`,
      type: ChannelType.GuildText,
      parent: categoryId,
      permissionOverwrites: [
        {
          id: interaction.guild.id,
          deny: [PermissionsBitField.Flags.ViewChannel],
        },
        {
          id: interaction.user.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
          ],
        },
        {
          id: client.user.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ManageChannels,
          ],
        },
      ],
    });

        // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
        const closeEmbed = new EmbedBuilder()
          .setTitle("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏≤")
          .setDescription("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏±‡∏ö")
          .setColor(0x9b59b6)

        const closeRow = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("close_ticket")
            .setLabel("‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß")
            .setStyle(ButtonStyle.Danger)
        );

        await channel.send({
          content: `<@${interaction.user.id}>`,
          embeds: [closeEmbed],
          components: [closeRow],
        });

        // ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
// ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
const optionEmbed = new EmbedBuilder()
  .setTitle("‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
  .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô'")
  .setColor(0x9b59b6);

// ‡∏õ‡∏∏‡πà‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô"
const noOptionButton = new ButtonBuilder()
  .setCustomId("no_options")
  .setLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô")
  .setStyle(ButtonStyle.Secondary);

// ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô
const selectMenu = new StringSelectMenuBuilder()
  .setCustomId("select_features")
  .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô")
  .setMinValues(1)
  .setMaxValues(8)
  .addOptions(
    { label: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö", value: "hair_move" },
    { label: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö‡∏¢‡∏≤‡∏ß", value: "long_hair_move" },
    { label: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö", value: "eye_blink" },
    { label: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà", value: "eye_blink_new" },
    { label: "‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å", value: "boobs" },
    { label: "‡∏õ‡∏≠‡∏¢‡∏õ‡∏°", value: "bangs" },
    { label: "‡∏ï‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á", value: "glow_eye" },
    { label: "‡∏ï‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö", value: "eye_move" }
  );

// ‡∏£‡∏ß‡∏°‡∏õ‡∏∏‡πà‡∏° + select menu ‡πÉ‡∏ô 2 row
const selectRow = new ActionRowBuilder().addComponents(selectMenu);
const buttonRow = new ActionRowBuilder().addComponents(noOptionButton);

await channel.send({
  embeds: [optionEmbed],
  components: [selectRow, buttonRow],
});


        await interaction.reply({
          content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà ${channel}`,
          ephemeral: true,
        });
      }

      // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á
      if (interaction.customId === "close_ticket") {
  const member = interaction.guild.members.cache.get(interaction.user.id);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ permission ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á
  if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
    await interaction.reply({
      content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ",
      ephemeral: true,
    });
    return;
  }

  await interaction.reply({
    content: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ...",
    ephemeral: true,
  });
    interaction.channel.delete().catch(console.error);
}


if (interaction.customId === "no_options") {
  const addonPrice = 30;
  await interaction.deferUpdate();
  const oldMessage = summaryMessages.get(interaction.user.id);
  if (oldMessage && oldMessage.deletable) {
    await oldMessage.delete().catch(() => {});
  }
const msg = await interaction.channel.send({
  content: `<@${interaction.user.id}>\n# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô\n**‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô: ${addonPrice} ‡∏ö‡∏≤‡∏ó**\n## ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà \n## <#1371395778727383040>`,
  components: [createFormButton()],  // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
});


  summaryMessages.set(interaction.user.id, msg);
}



    }

    // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Select Menu
    if (interaction.customId === "select_features") {
  const labels = {
    hair_move: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö",
    long_hair_move: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö‡∏¢‡∏≤‡∏ß",
    eye_blink: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö",
    eye_blink_new: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà",
    boobs: "‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å",
    bangs: "‡∏õ‡∏≠‡∏¢‡∏õ‡∏°",
    glow_eye: "‡∏ï‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á",
    eye_move: "‡∏ï‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö",
  };

  const prices = {
    hair_move: 30,
    long_hair_move: 70,
    eye_blink: 25,
    eye_blink_new: 35,
    boobs: 25,
    bangs: 30,
    glow_eye: 35,
    eye_move: 100,
  };

  let selected = interaction.values;

  if (selected.includes("hair_move") && selected.includes("long_hair_move")) {
    selected = selected.filter((v) => v !== "hair_move");
  }
  if (selected.includes("eye_blink") && selected.includes("eye_blink_new")) {
    selected = selected.filter((v) => v !== "eye_blink");
  }

  let totalPrice = 0;
  const detailList = selected.map((v) => {
    const price = prices[v] || 0;
    totalPrice += price;
    return `‚Ä¢ ${labels[v]}: ${price} ‡∏ö‡∏≤‡∏ó`;
  }).join("\n");

  const addonPrice = 30;
  totalPrice += addonPrice;
  const detailListWithAddon = `‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô: ${addonPrice} ‡∏ö‡∏≤‡∏ó\n` + detailList;

  await interaction.deferUpdate();

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const oldMessage = summaryMessages.get(interaction.user.id);
  if (oldMessage && oldMessage.deletable) {
    await oldMessage.delete().catch(() => {});
  }

const msg = await interaction.channel.send({
  content: `<@${interaction.user.id}>\n# ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô\n**${detailListWithAddon}\n\n‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤: ${totalPrice} ‡∏ö‡∏≤‡∏ó**\n## ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà \n## <#1371395778727383040>`,
  components: [createFormButton()],  // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
});


  summaryMessages.set(interaction.user.id, msg);
}

if (interaction.isButton() && interaction.customId === 'open_form') {
    const modal = new ModalBuilder()
      .setCustomId('skin_order_form')
      .setTitle('‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°');

    const xboxInput = new TextInputBuilder()
      .setCustomId('xbox_name')
      .setLabel('‡∏ä‡∏∑‡πà‡∏≠ Xbox')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const lockInput = new TextInputBuilder()
      .setCustomId('lock_option')
      .setLabel('‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏´‡∏° (‡πÉ‡∏ä‡πà/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    const slotInput = new TextInputBuilder()
      .setCustomId('slot')
      .setLabel('‡πÉ‡∏™‡πà‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô (‡∏´‡∏°‡∏ß‡∏Å/‡πÄ‡∏Å‡∏£‡∏≤‡∏∞/‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á/‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤)')
      .setStyle(TextInputStyle.Short)
      .setRequired(true);

    modal.addComponents(
      new ActionRowBuilder().addComponents(xboxInput),
      new ActionRowBuilder().addComponents(lockInput),
      new ActionRowBuilder().addComponents(slotInput)
    );

    await interaction.showModal(modal);
  }
  

    if (interaction.isModalSubmit()) {
    if (interaction.isModalSubmit()) {
  if (interaction.customId === 'skin_order_form') {
    const xboxName = interaction.fields.getTextInputValue('xbox_name');
    const lockOption = interaction.fields.getTextInputValue('lock_option');
    const slot = interaction.fields.getTextInputValue('slot');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user + channel
    const key = interaction.user.id + "-" + interaction.channel.id;

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const oldMsg = formMessages.get(key);
    if (oldMsg && oldMsg.deletable) {
      await oldMsg.delete().catch(() => {});
    }
    const newMsg = await interaction.channel.send({
      content: `<@${interaction.user.id}>\n\n## ‡∏ä‡∏∑‡πà‡∏≠ Xbox : ${xboxName}\n## ‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏´‡∏° : ${lockOption}\n## ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà : ${slot}`,
    });
    formMessages.set(key, newMsg);
    await interaction.deferUpdate();
  }
}
  }


  });
};
