const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField,
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
} = require("discord.js");
const { db } = require("./firebase");

// ==== STATE ====
const summaryMessages = new Map(); // key: `${userId}-${channelId}` -> last summary message
const formMessages = new Map();    // key: `${userId}-${channelId}` -> last form message
const userTotals    = new Map();   // key: `${userId}-${channelId}` -> number (subtotal ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° base)
const userDetails   = new Map();   // key: `${userId}-${channelId}` -> string[] ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢
const ticketModes   = new Map();   // key: `${userId}-${channelId}` -> 'standard'|'bundle'|'preset'

const PAY_CHANNEL_ID = "1371395778727383040";
const ADDON_BASE_PRICE = 30; // ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î standard

const labels = {
  hair_move: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö",
  long_hair_move: "‡∏ú‡∏°‡∏Ç‡∏¢‡∏±‡∏ö‡∏¢‡∏≤‡∏ß",
  eye_blink: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö",
  eye_blink_new: "‡∏ï‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà",
  boobs: "‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å",
  bangs: "‡∏õ‡∏≠‡∏¢‡∏ú‡∏°",
  glow_eye: "‡∏ï‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á",
  eye_move: "‡∏ï‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö",
};
const prices = {
  hair_move: 30,
  long_hair_move: 70,
  eye_blink: 25,
  eye_blink_new: 35,
  boobs: 25,
  bangs: 30,
  glow_eye: 35,
  eye_move: 100,
};

function keyOf(userId, channelId) {
  return `${userId}-${channelId}`;
}
function initState(userId, channelId, mode) {
  const k = keyOf(userId, channelId);
  userTotals.set(k, 0);
  userDetails.set(k, []);
  ticketModes.set(k, mode);
  return k;
}
function setSubtotal(k, val) {
  userTotals.set(k, Math.max(0, Number(val) || 0));
}
function setDetails(k, lines) {
  userDetails.set(k, Array.isArray(lines) ? lines : []);
}
function createFormButton() {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId("open_form")
      .setLabel("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÉ‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å")
      .setStyle(ButtonStyle.Success)
  );
}
async function postOrReplaceSummary(interaction, title = null) {
  const k = keyOf(interaction.user.id, interaction.channel.id);
  const mode = ticketModes.get(k) || "standard";
  const details = userDetails.get(k) || [];
  let total = userTotals.get(k) || 0;

  const lines = [];
  if (title) lines.push(`# ${title}`);
  else lines.push("# ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");

  // ‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î standard
  if (mode === "standard") {
    lines.push(`**‚Ä¢ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô: ${ADDON_BASE_PRICE} ‡∏ö‡∏≤‡∏ó**`);
    total += ADDON_BASE_PRICE;
  }

  if (details.length) lines.push(...details);
  lines.push(`\n**‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤: ${total} ‡∏ö‡∏≤‡∏ó**`);
  lines.push(`## ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà`);
  lines.push(`## <#${PAY_CHANNEL_ID}>`);

  // üî∏ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î standard ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const components = mode === "standard" ? [createFormButton()] : [];

  const old = summaryMessages.get(k);
  if (old && old.deletable) {
    await old.delete().catch(() => {});
  }
  const msg = await interaction.channel.send({
    content: `<@${interaction.user.id}>\n` + lines.join("\n"),
    components,
  });
  summaryMessages.set(k, msg);
}


// ==== MAIN MODULE ====
module.exports = function (client) {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ !ticket
  client.on("messageCreate", async (message) => {
    if (!message.guild || message.author.bot) return;
    if (!message.content.startsWith("!ticket")) return;

    const args = message.content.trim().split(/\s+/);
    const categoryId = args[1];
    if (!categoryId) {
      return message.reply("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÄ‡∏ä‡πà‡∏ô `!ticket 123456789`");
    }
    const guildId = message.guild.id;
    await db.doc(`ticket_settings/${guildId}`).set({ categoryId });

    const embed = new EmbedBuilder()
      .setTitle("‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô")
      .setDescription("**‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô‡∏î‡∏π‡πÄ‡∏£‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà <#1406520839880445962>\n‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô ‡∏™‡∏Å‡∏¥‡∏ô‡∏•‡∏∞10‡∏ö‡∏≤‡∏ó‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏•‡∏¢**")
      .setColor(0x9b59b6)
      .setImage("https://giffiles.alphacoders.com/220/220120.gif")
      .setFooter({ text: "Make by Purple Shop" });

    // 3 ‡∏õ‡∏∏‡πà‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà UI ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId("create_ticket_standard").setLabel("‡∏ó‡∏≥‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô").setStyle(ButtonStyle.Primary),
      new ButtonBuilder().setCustomId("create_ticket_bundle").setLabel("‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô").setStyle(ButtonStyle.Primary),
      new ButtonBuilder().setCustomId("create_ticket_preset").setLabel("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à").setStyle(ButtonStyle.Primary),
    );

    await message.channel.send({ embeds: [embed], components: [row] });
    await message.reply(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: \`${categoryId}\``);
  });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á
  async function createTicketChannel(interaction, mode) {
    const guildId = interaction.guild.id;
    const doc = await db.doc(`ticket_settings/${guildId}`).get();
    if (!doc.exists || !doc.data().categoryId) {
      await interaction.reply({ content: "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ", ephemeral: true });
      return null;
    }
    const categoryId = doc.data().categoryId;
    if (!/^\d{17,20}$/.test(categoryId)) {
      await interaction.reply({ content: "‚ùå ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Snowflake)", ephemeral: true });
      return null;
    }

    const channel = await interaction.guild.channels.create({
      name: `üî•-ùïãùïöùïîùïúùïñùï•_${interaction.user.username}`,
      type: ChannelType.GuildText,
      parent: categoryId,
      permissionOverwrites: [
        { id: interaction.guild.id, deny: [PermissionsBitField.Flags.ViewChannel] },
        { id: interaction.user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
        { id: client.user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ManageChannels] },
      ],
    });

    // init state ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    initState(interaction.user.id, channel.id, mode);

    const openEmbed = new EmbedBuilder()
      .setTitle("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏≤")
      .setDescription("‡∏Å‡∏£‡∏≠‡∏Å/‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏±‡∏ö")
      .setColor(0x9b59b6);

    const closeRow = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId("close_ticket").setLabel("‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß").setStyle(ButtonStyle.Danger)
    );

    await channel.send({ content: `<@${interaction.user.id}>`, embeds: [openEmbed], components: [closeRow] });

    // UI ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    if (mode === "standard") {
      const optionEmbed = new EmbedBuilder()
        .setTitle("‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô'")
        .setColor(0x9b59b6);

      const noOptionButton = new ButtonBuilder()
        .setCustomId("no_options")
        .setLabel("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô")
        .setStyle(ButtonStyle.Secondary);

      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("select_features")
        .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô")
        .setMinValues(1)
        .setMaxValues(8)
        .addOptions(
          { label: labels.hair_move, value: "hair_move" },
          { label: labels.long_hair_move, value: "long_hair_move" },
          { label: labels.eye_blink, value: "eye_blink" },
          { label: labels.eye_blink_new, value: "eye_blink_new" },
          { label: labels.boobs, value: "boobs" },
          { label: labels.bangs, value: "bangs" },
          { label: labels.glow_eye, value: "glow_eye" },
          { label: labels.eye_move, value: "eye_move" }
        );

      const selectRow = new ActionRowBuilder().addComponents(selectMenu);
      const buttonRow = new ActionRowBuilder().addComponents(noOptionButton);
      await channel.send({ embeds: [optionEmbed], components: [selectRow, buttonRow] });
    }

    if (mode === "bundle") {
      const embed = new EmbedBuilder()
        .setTitle("‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô")
        .setDescription("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏° (‡∏Ñ‡∏¥‡∏î 10 ‡∏ö‡∏≤‡∏ó/‡∏ä‡∏¥‡πâ‡∏ô)")
        .setColor(0x9b59b6);

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId("open_bundle_modal").setLabel("‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô").setStyle(ButtonStyle.Primary)
      );

      await channel.send({ embeds: [embed], components: [row] });
    }

    if (mode === "preset") {
      const embed = new EmbedBuilder()
        .setTitle("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        .setDescription("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏±‡∏ô)")
        .setColor(0x9b59b6);

      const presetSelect = new StringSelectMenuBuilder()
        .setCustomId("preset_select")
        .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        .setMinValues(1)
        .setMaxValues(3)
        .addOptions(
          { label: "‡∏ú‡πâ‡∏≤‡∏Ñ‡∏•‡∏∏‡∏° 6 ‡∏™‡∏µ (100 ‡∏ö‡∏≤‡∏ó)", value: "cloak6_100" },
          { label: "‡∏´‡∏π-‡∏´‡∏≤‡∏á‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å 12 ‡∏™‡∏µ (90 ‡∏ö‡∏≤‡∏ó)", value: "foxtail12_90" },
          { label: "‡∏£‡πà‡∏° 12 ‡∏™‡∏µ (90 ‡∏ö‡∏≤‡∏ó)", value: "umbrella12_90" }
        );

      const row = new ActionRowBuilder().addComponents(presetSelect);
      await channel.send({ embeds: [embed], components: [row] });
    }

    await interaction.reply({ content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà ${channel}`, ephemeral: true });
    return channel;
  }

  client.on("interactionCreate", async (interaction) => {
    // === ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
    if (interaction.isButton()) {
      if (interaction.customId === "create_ticket_standard") {
        await createTicketChannel(interaction, "standard");
      }
      if (interaction.customId === "create_ticket_bundle") {
        await createTicketChannel(interaction, "bundle");
      }
      if (interaction.customId === "create_ticket_preset") {
        await createTicketChannel(interaction, "preset");
      }

      // ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß
      if (interaction.customId === "close_ticket") {
        const member = interaction.guild.members.cache.get(interaction.user.id);
        if (!member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
          await interaction.reply({ content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ", ephemeral: true });
          return;
        }
        // ‡∏•‡πâ‡∏≤‡∏á state ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
        const k = keyOf(interaction.user.id, interaction.channel.id);
        summaryMessages.delete(k);
        formMessages.delete(k);
        userTotals.delete(k);
        userDetails.delete(k);
        ticketModes.delete(k);

        await interaction.reply({ content: "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ...", ephemeral: true });
        interaction.channel.delete().catch(console.error);
      }

      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô (standard) -> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ô‡∏±‡∏ö base 30)
      if (interaction.customId === "no_options") {
        await interaction.deferUpdate();
        const k = keyOf(interaction.user.id, interaction.channel.id);
        ticketModes.set(k, "standard");
        setSubtotal(k, 0);
        setDetails(k, []);
        await postOrReplaceSummary(interaction, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô");
      }

      // ‡πÄ‡∏õ‡∏¥‡∏î modal (bundle)
      if (interaction.customId === "open_bundle_modal") {
        const modal = new ModalBuilder()
          .setCustomId("bundle_modal")
          .setTitle("‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô");
        const qty = new TextInputBuilder()
          .setCustomId("bundle_count")
          .setLabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏° (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
          .setStyle(TextInputStyle.Short)
          .setRequired(true);
        modal.addComponents(new ActionRowBuilder().addComponents(qty));
        await interaction.showModal(modal);
      }

      // ‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á
      if (interaction.customId === "open_form") {
        const modal = new ModalBuilder()
          .setCustomId("skin_order_form")
          .setTitle("‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°");

        const xboxInput = new TextInputBuilder().setCustomId("xbox_name").setLabel("‡∏ä‡∏∑‡πà‡∏≠ Xbox").setStyle(TextInputStyle.Short).setRequired(true);
        const lockInput = new TextInputBuilder().setCustomId("lock_option").setLabel("‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏´‡∏° (‡∏•‡πá‡∏≠‡∏Å/‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å)").setStyle(TextInputStyle.Short).setRequired(true);
        const slotInput = new TextInputBuilder().setCustomId("slot").setLabel("‡πÉ‡∏™‡πà‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô (‡∏´‡∏°‡∏ß‡∏Å/‡πÄ‡∏Å‡∏£‡∏≤‡∏∞/‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á/‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤)").setStyle(TextInputStyle.Short).setRequired(true);

        modal.addComponents(
          new ActionRowBuilder().addComponents(xboxInput),
          new ActionRowBuilder().addComponents(lockInput),
          new ActionRowBuilder().addComponents(slotInput)
        );
        await interaction.showModal(modal);
      }
    }

    // === Select Menu ===
    if (interaction.isStringSelectMenu()) {
      // ‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å (standard) -> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡∏ö
      if (interaction.customId === "select_features") {
        let selected = interaction.values.slice();
        if (selected.includes("hair_move") && selected.includes("long_hair_move")) {
          selected = selected.filter(v => v !== "hair_move");
        }
        if (selected.includes("eye_blink") && selected.includes("eye_blink_new")) {
          selected = selected.filter(v => v !== "eye_blink");
        }

        await interaction.deferUpdate();

        const k = keyOf(interaction.user.id, interaction.channel.id);
        ticketModes.set(k, "standard");

        const detailLines = selected.map(v => `‚Ä¢ ${labels[v]}: ${prices[v] || 0} ‡∏ö‡∏≤‡∏ó`);
        const subtotal = selected.reduce((acc, v) => acc + (prices[v] || 0), 0);

        setDetails(k, detailLines);     // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        setSubtotal(k, subtotal);       // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        await postOrReplaceSummary(interaction, "‡∏≠‡∏≠‡∏ü‡∏ä‡∏±‡πà‡∏ô");
      }

      // ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (preset) -> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏ö‡∏ß‡∏Å base
      if (interaction.customId === "preset_select") {
        await interaction.deferUpdate();

        const table = {
          cloak6_100:   { name: "‡∏ú‡πâ‡∏≤‡∏Ñ‡∏•‡∏∏‡∏° 6 ‡∏™‡∏µ",        price: 100 },
          foxtail12_90: { name: "‡∏´‡∏π-‡∏´‡∏≤‡∏á‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å 12 ‡∏™‡∏µ", price: 90  },
          umbrella12_90:{ name: "‡∏£‡πà‡∏° 12 ‡∏™‡∏µ",            price: 90  },
        };

        const lines = [];
        let subtotal = 0;
        for (const v of interaction.values) {
          const p = table[v];
          if (p) {
            lines.push(`‚Ä¢ ${p.name}: ${p.price} ‡∏ö‡∏≤‡∏ó`);
            subtotal += p.price;
          }
        }

        const k = keyOf(interaction.user.id, interaction.channel.id);
        ticketModes.set(k, "preset");
        setDetails(k, lines);     // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        setSubtotal(k, subtotal); // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°

        await postOrReplaceSummary(interaction, "‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    }

    // === Modal Submit ===
    if (interaction.isModalSubmit()) {
      // ‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô -> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏ö‡∏ß‡∏Å base
      if (interaction.customId === "bundle_modal") {
        const raw = interaction.fields.getTextInputValue("bundle_count") || "0";
        const n = parseInt(raw, 10);
        if (!Number.isFinite(n) || n < 0) {
          return interaction.reply({ content: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ", ephemeral: true });
        }
        const addPrice = n * 10;

        const k = keyOf(interaction.user.id, interaction.channel.id);
        ticketModes.set(k, "bundle");
        setDetails(k, [`‚Ä¢ ‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô: ${n} √ó 10 = ${addPrice} ‡∏ö‡∏≤‡∏ó`]); // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        setSubtotal(k, addPrice); // ‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°

        await interaction.deferUpdate();
        await postOrReplaceSummary(interaction, "‡∏£‡∏ß‡∏°‡πÅ‡∏≠‡∏î‡∏≠‡∏≠‡∏ô‡∏™‡∏Å‡∏¥‡∏ô");
      }

      // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      if (interaction.customId === "skin_order_form") {
        const xboxName = interaction.fields.getTextInputValue("xbox_name");
        const lockOption = interaction.fields.getTextInputValue("lock_option");
        const slot = interaction.fields.getTextInputValue("slot");

        const k = keyOf(interaction.user.id, interaction.channel.id);
        const oldMsg = formMessages.get(k);
        if (oldMsg && oldMsg.deletable) {
          await oldMsg.delete().catch(() => {});
        }
        const newMsg = await interaction.channel.send({
          content: `<@${interaction.user.id}>\n\n## ‡∏ä‡∏∑‡πà‡∏≠ Xbox : ${xboxName}\n## ‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏´‡∏° : ${lockOption}\n## ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà : ${slot}`,
        });
        formMessages.set(k, newMsg);
        await interaction.deferUpdate();
      }
    }
  });
};
